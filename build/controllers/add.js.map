{"version":3,"sources":["../../src/controllers/add.js"],"names":["require","config","path","process","env","NODE_ENV","creds","client_email","EMAIL","private_key","PKEY","add","row","req","res","body","spreadsheet","id","Promise","resolve","reject","Error","spreadsheetId","DEFAULTSHEET","doc","GoogleSpreadsheet","sheet","async","series","setAuth","step","console","log","useServiceAccountAuth","getInfoAndWorksheets","getInfo","err","info","title","author","email","worksheets","rowCount","colCount","addNewRow","addRow","errortitle","error","returnedRow","result","message","pop"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;AAEAA,QAAQ,QAAR,EAAkBC,MAAlB,CAAyB,EAAEC,qBAAmBC,QAAQC,GAAR,CAAYC,QAA/B,SAAF,EAAzB;;AAEA,IAAMC,QAAQ;AACZC,gBAAcJ,QAAQC,GAAR,CAAYI,KADd;AAEZC,eAAaN,QAAQC,GAAR,CAAYM;AAFb,CAAd;;AAKA,IAAMC,MAAM;AACVC,OAAK,aAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,QAAID,IAAIE,IAAJ,CAASC,WAAb,EAA0B;AACxB,UAAI,CAACH,IAAIE,IAAJ,CAASC,WAAT,CAAqBC,EAA1B,EAA8B;AAC5B,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCA,iBAAO,IAAIC,KAAJ,CAAU,wCAAV,CAAP;AACD,SAFM,CAAP;AAGD;AACF;;AAED,QAAMC,gBAAgBT,IAAIE,IAAJ,CAASC,WAAT,GAAuBH,IAAIE,IAAJ,CAASC,WAAT,CAAqBC,EAA5C,GAAiDd,QAAQC,GAAR,CAAYmB,YAAnF;AACA,QAAMC,MAAM,IAAIC,2BAAJ,CAAsBH,aAAtB,CAAZ;AACA,QAAII,cAAJ;;AAEA,WAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCO,sBAAMC,MAAN,CACE,CACE,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrBC,gBAAQC,GAAR,CAAY1B,KAAZ;AACAkB,YAAIS,qBAAJ,CAA0B3B,KAA1B,EAAiCwB,IAAjC;AACD,OAJH,EAKE,SAASI,oBAAT,CAA8BJ,IAA9B,EAAoC;AAClCN,YAAIW,OAAJ,CAAY,UAACC,GAAD,EAAMC,IAAN,EAAe;AACzBN,kBAAQC,GAAR,kBAA2BK,KAAKC,KAAhC,YAA4CD,KAAKE,MAAL,CAAYC,KAAxD;;AADyB,gDAEfH,KAAKI,UAFU;;AAExBf,eAFwB;;AAGzBK,kBAAQC,GAAR,eAAwBN,MAAMY,KAA9B,SAAuCZ,MAAMgB,QAA7C,SAAyDhB,MAAMiB,QAA/D;AACAb;AACD,SALD;AAMD,OAZH,EAaE,SAASc,SAAT,CAAmBd,IAAnB,EAAyB;AACvBN,YAAIqB,MAAJ,CACE,CADF,EAEE;AACEC,sBAAYjC,IAAIE,IAAJ,CAASuB,KADvB;AAEES,iBAAOlC,IAAIE,IAAJ,CAASgC;AAFlB,SAFF,EAME,UAACX,GAAD,EAAMY,WAAN,EAAsB;AACpB,cAAIZ,GAAJ,EAAS;AACPN,iBAAKM,GAAL;AACD;AACDN,eAAK,IAAL,EAAWkB,YAAY/B,EAAvB;AACD,SAXH;AAaD,OA3BH,CADF,EA8BE,UAACmB,GAAD,EAAMa,MAAN,EAAiB;AACf,YAAIb,GAAJ,EAAS;AACPhB,iBAAO,IAAIC,KAAJ,oBAA2Be,GAA3B,CAAP;AACD;AACDjB,gBAAQ,EAAE+B,SAASD,OAAOE,GAAP,EAAX,EAAR;AACD,OAnCH;AAqCD,KAtCM,CAAP;AAuCD;AArDS,CAAZ;;kBAwDexC,G","file":"add.js","sourcesContent":["import GoogleSpreadsheet from 'google-spreadsheet';\nimport async from 'async';\n\nrequire('dotenv').config({ path: `variables.${process.env.NODE_ENV}.env` });\n\nconst creds = {\n  client_email: process.env.EMAIL,\n  private_key: process.env.PKEY,\n};\n\nconst add = {\n  row: (req, res) => {\n    if (req.body.spreadsheet) {\n      if (!req.body.spreadsheet.id) {\n        return new Promise((resolve, reject) => {\n          reject(new Error('No spreadsheetId in spreadsheet object'));\n        });\n      }\n    }\n\n    const spreadsheetId = req.body.spreadsheet ? req.body.spreadsheet.id : process.env.DEFAULTSHEET;\n    const doc = new GoogleSpreadsheet(spreadsheetId);\n    let sheet;\n\n    return new Promise((resolve, reject) => {\n      async.series(\n        [\n          function setAuth(step) {\n            console.log(creds);\n            doc.useServiceAccountAuth(creds, step);\n          },\n          function getInfoAndWorksheets(step) {\n            doc.getInfo((err, info) => {\n              console.log(`Loaded doc: ${info.title} by ${info.author.email}`);\n              [sheet] = info.worksheets;\n              console.log(`sheet 1: ${sheet.title} ${sheet.rowCount}x${sheet.colCount}`);\n              step();\n            });\n          },\n          function addNewRow(step) {\n            doc.addRow(\n              1,\n              {\n                errortitle: req.body.title,\n                error: req.body.error,\n              },\n              (err, returnedRow) => {\n                if (err) {\n                  step(err);\n                }\n                step(null, returnedRow.id);\n              }\n            );\n          },\n        ],\n        (err, result) => {\n          if (err) {\n            reject(new Error(`Sheets Error: ${err}`));\n          }\n          resolve({ message: result.pop() });\n        }\n      );\n    });\n  },\n};\n\nexport default add;\n"]}